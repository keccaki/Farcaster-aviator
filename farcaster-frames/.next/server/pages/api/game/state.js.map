{"version":3,"file":"pages/api/game/state.js","mappings":"kFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,yCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,+GCMe,eAAeC,EAAQC,CAAY,EAChD,GAAIA,QAAAA,EAAIC,MAAM,CACZ,OAAO,IAAIC,SAASC,KAAKC,SAAS,CAAC,CAAEC,QAAS,GAAOC,MAAO,oBAAqB,GAAI,CACnFC,OAAQ,IACRC,QAAS,CAAE,eAAgB,kBAAmB,CAChD,GAGF,GAAI,CAEF,IAAMC,EAAa,CAAC,UAAW,SAAU,UAAU,CAC7CC,EAAeD,CAAU,CAACE,KAAKC,KAAK,CAACC,KAAKC,GAAG,GAAK,KAASL,EAAWM,MAAM,CAAC,CAE/EC,EAAa,EACbC,EAAgB,KAEpB,GAAIP,WAAAA,EAA2B,CAE7B,IAAMQ,EAAaL,KAAMC,GAAG,GAAK,IAAS,IAC1CE,EAAa,EAAOE,GAAAA,EACpBD,EAAgBN,KAAKQ,GAAG,CAAC,EAAG,GAAKD,EACnC,KAA4B,YAAjBR,GACTM,CAAAA,EAAa,EAAOH,KAAMC,GAAG,GAAK,IAAS,IAAO,IAIpD,IAAMM,EAAWV,YAAAA,EAA6B,CAC5C,CACEW,QAAS,EACTC,SAAU,UACVC,OAAQ,GACRC,aAAc,GAChB,EACA,CACEH,QAAS,EACTC,SAAU,UACVC,OAAQ,GACRC,aAAc,IAChB,EACD,CAAG,EAAE,CAEAC,EAAW,CACfpB,QAAS,GACTqB,KAAM,CACJnB,OAAQG,EACRM,WAAYW,WAAWX,EAAWY,OAAO,CAAC,IAC1CC,SAAUlB,KAAKC,KAAK,CAACC,KAAKC,GAAG,GAAK,KAAOgB,QAAQ,GACjDC,eAAgBd,EAChBe,aAAcZ,EACda,WAAYb,EAASL,MAAM,CAC3BmB,iBAAkBd,EAASe,MAAM,CAAC,CAACC,EAAKC,IAAQD,EAAMC,EAAId,MAAM,CAAE,EACpE,EACAe,UAAW,IAAIzB,OAAO0B,WAAW,EACnC,EAEA,OAAO,IAAIrC,SAASC,KAAKC,SAAS,CAACqB,GAAW,CAC5ClB,OAAQ,IACRC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,qBAChC,+BAAgC,cAClC,CACF,EAEF,CAAE,MAAOF,EAAO,CAgBd,OAfAkC,QAAQlC,KAAK,CAAC,oBAAqBA,GAe5B,IAAIJ,SAASC,KAAKC,SAAS,CAbT,CACvBC,QAAS,GACTqB,KAAM,CACJnB,OAAQ,UACRS,WAAY,EACZa,SAAUhB,KAAKC,GAAG,GAAGgB,QAAQ,GAC7BE,aAAc,EAAE,CAChBC,WAAY,EACZC,iBAAkB,CACpB,EACAI,UAAW,IAAIzB,OAAO0B,WAAW,EACnC,GAEsD,CACpDhC,OAAQ,IACRC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,qBAChC,+BAAgC,cAClC,CACF,EACF,CACF,CCrFuB,SAAAiC,EAAAC,CAAA,EACvB,MAAiB,GAAAC,EAAAC,CAAA,EAAO,CACxB,GAAAF,CAAA,CACAG,iBAA8BC,EAAAC,CAAA,CAC9BC,KAAA,kBACAjD,QAAuB,GAAAkD,EAAAC,EAAA,EAAc,kBAAoBnD,EACzD,EACA","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./pages/api/game/state.ts","webpack://_N_E/?6117"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { NextApiRequest, NextApiResponse } from 'next';\n\nexport const config = {\n  runtime: 'edge',\n};\n\nexport default async function handler(req: Request): Promise<Response> {\n  if (req.method !== 'GET') {\n    return new Response(JSON.stringify({ success: false, error: 'Method not allowed' }), {\n      status: 405,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  try {\n    // Simulate current game state for demo\n    const gameStates = ['waiting', 'flying', 'crashed'];\n    const currentState = gameStates[Math.floor(Date.now() / 10000) % gameStates.length];\n    \n    let multiplier = 1.0;\n    let timeRemaining = null;\n    \n    if (currentState === 'flying') {\n      // Simulate flying multiplier that increases over time\n      const flightTime = (Date.now() % 10000) / 1000; // 0-10 seconds\n      multiplier = 1.0 + (flightTime * 0.5); // Increases by 0.5x per second\n      timeRemaining = Math.max(0, 10 - flightTime);\n    } else if (currentState === 'crashed') {\n      multiplier = 1.0 + ((Date.now() % 10000) / 1000 * 0.5);\n    }\n\n    // Simulate some current bets\n    const mockBets = currentState !== 'crashed' ? [\n      {\n        user_id: 1,\n        username: 'Player1',\n        amount: 10.0,\n        auto_cashout: 2.5\n      },\n      {\n        user_id: 2, \n        username: 'Player2',\n        amount: 25.0,\n        auto_cashout: null\n      }\n    ] : [];\n\n    const response = {\n      success: true,\n      data: {\n        status: currentState,\n        multiplier: parseFloat(multiplier.toFixed(2)),\n        round_id: Math.floor(Date.now() / 30000).toString(), // New round every 30 seconds\n        time_remaining: timeRemaining,\n        current_bets: mockBets,\n        total_bets: mockBets.length,\n        total_bet_amount: mockBets.reduce((sum, bet) => sum + bet.amount, 0)\n      },\n      timestamp: new Date().toISOString()\n    };\n\n    return new Response(JSON.stringify(response), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      },\n    });\n\n  } catch (error) {\n    console.error('Game state error:', error);\n    \n    const fallbackResponse = {\n      success: true,\n      data: {\n        status: 'waiting',\n        multiplier: 1.0,\n        round_id: Date.now().toString(),\n        current_bets: [],\n        total_bets: 0,\n        total_bet_amount: 0\n      },\n      timestamp: new Date().toISOString()\n    };\n\n    return new Response(JSON.stringify(fallbackResponse), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS', \n        'Access-Control-Allow-Headers': 'Content-Type'\n      },\n    });\n  }\n}\n","\n        import 'next/dist/esm/server/web/globals'\n        import { adapter } from 'next/dist/esm/server/web/adapter'\n        import { IncrementalCache } from 'next/dist/esm/server/lib/incremental-cache'\n        import { wrapApiHandler } from 'next/dist/esm/server/api-utils'\n\n        import handler from \"private-next-pages/api/game/state.ts\"\n\n        if (typeof handler !== 'function') {\n          throw new Error('The Edge Function \"pages/api/game/state\" must export a `default` function');\n        }\n\n        export default function nHandler (opts) {\n          return adapter({\n              ...opts,\n              IncrementalCache,\n              page: \"/api/game/state\",\n              handler: wrapApiHandler(\"/api/game/state\", handler),\n          })\n        }\n    "],"names":["module","exports","require","handler","req","method","Response","JSON","stringify","success","error","status","headers","gameStates","currentState","Math","floor","Date","now","length","multiplier","timeRemaining","flightTime","max","mockBets","user_id","username","amount","auto_cashout","response","data","parseFloat","toFixed","round_id","toString","time_remaining","current_bets","total_bets","total_bet_amount","reduce","sum","bet","timestamp","toISOString","console","nHandler","opts","adapter","C","IncrementalCache","incremental_cache","k","page","api_utils","fd"],"sourceRoot":""}