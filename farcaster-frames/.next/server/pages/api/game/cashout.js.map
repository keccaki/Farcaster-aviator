{"version":3,"file":"pages/api/game/cashout.js","mappings":"kFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,yCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,+GCMe,eAAeC,EAAQC,CAAY,EAChD,GAAIA,SAAAA,EAAIC,MAAM,CACZ,OAAO,IAAIC,SAASC,KAAKC,SAAS,CAAC,CAAEC,QAAS,GAAOC,MAAO,oBAAqB,GAAI,CACnFC,OAAQ,IACRC,QAAS,CAAE,eAAgB,kBAAmB,CAChD,GAGF,GAAI,CAEF,GAAM,CAAEC,IAAAA,CAAG,CAAEC,MAAAA,CAAK,CAAEC,WAAAA,CAAU,CAAE,CADnB,MAAMX,EAAIY,IAAI,GAI3B,GAAI,CAACH,GAAO,CAACC,GAAS,CAACC,EACrB,OAAO,IAAIT,SAASC,KAAKC,SAAS,CAAC,CACjCC,QAAS,GACTC,MAAO,iDACT,GAAI,CACFC,OAAQ,IACRC,QAAS,CAAE,eAAgB,kBAAmB,CAChD,GAGF,GAAIG,EAAa,EACf,OAAO,IAAIT,SAASC,KAAKC,SAAS,CAAC,CACjCC,QAAS,GACTC,MAAO,oBACT,GAAI,CACFC,OAAQ,IACRC,QAAS,CAAE,eAAgB,kBAAmB,CAChD,GAOF,IAAMK,EAAYC,GAAqBH,EAIjCI,EAAW,CACfV,QAAS,GACTW,KAAM,CACJN,MAAOA,EACPG,UAAWI,WAAWJ,EAAUK,OAAO,CAAC,IACxCP,WAAYM,WAAWN,EAAWO,OAAO,CAAC,IAC1CC,WAAYF,WAAWE,CARRC,IAAmBP,CAAAA,EAQAK,OAAO,CAAC,IAC1CG,UAZuB,GAavBC,YAAa,IAAIC,OAAOC,WAAW,EACrC,EACAC,QAAS,CAAC,yBAAyB,EAAEZ,EAAUK,OAAO,CAAC,GAAG,MAAM,EAAEP,EAAWO,OAAO,CAAC,GAAG,aAAa,CAAC,EAWxG,OARAQ,QAAQC,GAAG,CAAC,sBAAuB,CACjClB,IAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAE,UAAAA,EACAe,UAAW,IAAIL,OAAOC,WAAW,EACnC,GAEO,IAAItB,SAASC,KAAKC,SAAS,CAACW,GAAW,CAC5CR,OAAQ,IACRC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,qBAChC,+BAAgC,cAClC,CACF,EAEF,CAAE,MAAOF,EAAO,CAGd,OAFAoB,QAAQpB,KAAK,CAAC,kBAAmBA,GAE1B,IAAIJ,SAASC,KAAKC,SAAS,CAAC,CACjCC,QAAS,GACTC,MAAO,iBACT,GAAI,CACFC,OAAQ,IACRC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,qBAChC,+BAAgC,cAClC,CACF,EACF,CACF,CClFuB,SAAAqB,EAAAC,CAAA,EACvB,MAAiB,GAAAC,EAAAC,CAAA,EAAO,CACxB,GAAAF,CAAA,CACAG,iBAA8BC,EAAAC,CAAA,CAC9BC,KAAA,oBACArC,QAAuB,GAAAsC,EAAAC,EAAA,EAAc,oBAAsBvC,EAC3D,EACA","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./pages/api/game/cashout.ts","webpack://_N_E/?2346"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { NextApiRequest, NextApiResponse } from 'next';\n\nexport const config = {\n  runtime: 'edge',\n};\n\nexport default async function handler(req: Request): Promise<Response> {\n  if (req.method !== 'POST') {\n    return new Response(JSON.stringify({ success: false, error: 'Method not allowed' }), {\n      status: 405,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  try {\n    const body = await req.json();\n    const { fid, betId, multiplier } = body;\n\n    // Validate required fields\n    if (!fid || !betId || !multiplier) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Missing required fields: fid, betId, multiplier'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    }\n\n    if (multiplier < 1) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Invalid multiplier'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Simulate cash out for demo\n    // In production, this would find the actual bet, validate it's active, calculate winnings, etc.\n    \n    const simulatedBetAmount = 10; // Mock bet amount\n    const winAmount = simulatedBetAmount * multiplier;\n    const simulatedBalance = 1000; // Mock current balance\n    const newBalance = simulatedBalance + winAmount;\n\n    const response = {\n      success: true,\n      data: {\n        betId: betId,\n        winAmount: parseFloat(winAmount.toFixed(2)),\n        multiplier: parseFloat(multiplier.toFixed(2)),\n        newBalance: parseFloat(newBalance.toFixed(2)),\n        betAmount: simulatedBetAmount,\n        cashedOutAt: new Date().toISOString()\n      },\n      message: `Congratulations! You won ${winAmount.toFixed(2)} with ${multiplier.toFixed(2)}x multiplier!`\n    };\n\n    console.log('Cash out processed:', {\n      fid,\n      betId,\n      multiplier,\n      winAmount,\n      timestamp: new Date().toISOString()\n    });\n\n    return new Response(JSON.stringify(response), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      },\n    });\n\n  } catch (error) {\n    console.error('Cash out error:', error);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Cash out failed'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      },\n    });\n  }\n}\n","\n        import 'next/dist/esm/server/web/globals'\n        import { adapter } from 'next/dist/esm/server/web/adapter'\n        import { IncrementalCache } from 'next/dist/esm/server/lib/incremental-cache'\n        import { wrapApiHandler } from 'next/dist/esm/server/api-utils'\n\n        import handler from \"private-next-pages/api/game/cashout.ts\"\n\n        if (typeof handler !== 'function') {\n          throw new Error('The Edge Function \"pages/api/game/cashout\" must export a `default` function');\n        }\n\n        export default function nHandler (opts) {\n          return adapter({\n              ...opts,\n              IncrementalCache,\n              page: \"/api/game/cashout\",\n              handler: wrapApiHandler(\"/api/game/cashout\", handler),\n          })\n        }\n    "],"names":["module","exports","require","handler","req","method","Response","JSON","stringify","success","error","status","headers","fid","betId","multiplier","json","winAmount","simulatedBetAmount","response","data","parseFloat","toFixed","newBalance","simulatedBalance","betAmount","cashedOutAt","Date","toISOString","message","console","log","timestamp","nHandler","opts","adapter","C","IncrementalCache","incremental_cache","k","page","api_utils","fd"],"sourceRoot":""}