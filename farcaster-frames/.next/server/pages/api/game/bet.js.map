{"version":3,"file":"pages/api/game/bet.js","mappings":"kFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,yCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,+GCMe,eAAeC,EAAQC,CAAY,EAChD,GAAIA,SAAAA,EAAIC,MAAM,CACZ,OAAO,IAAIC,SAASC,KAAKC,SAAS,CAAC,CAAEC,QAAS,GAAOC,MAAO,oBAAqB,GAAI,CACnFC,OAAQ,IACRC,QAAS,CAAE,eAAgB,kBAAmB,CAChD,GAGF,GAAI,CAEF,GAAM,CAAEC,IAAAA,CAAG,CAAEC,OAAAA,CAAM,CAAEC,QAAAA,CAAO,CAAEC,YAAAA,CAAW,CAAE,CAD9B,MAAMZ,EAAIa,IAAI,GAI3B,GAAI,CAACJ,GAAO,CAACC,GAAU,CAACC,EACtB,OAAO,IAAIT,SAASC,KAAKC,SAAS,CAAC,CACjCC,QAAS,GACTC,MAAO,+CACT,GAAI,CACFC,OAAQ,IACRC,QAAS,CAAE,eAAgB,kBAAmB,CAChD,GAGF,GAAIE,EAAS,EACX,OAAO,IAAIR,SAASC,KAAKC,SAAS,CAAC,CACjCC,QAAS,GACTC,MAAO,yBACT,GAAI,CACFC,OAAQ,IACRC,QAAS,CAAE,eAAgB,kBAAmB,CAChD,GAQF,GAAIM,IAAmBJ,EACrB,OAAO,IAAIR,SAASC,KAAKC,SAAS,CAAC,CACjCC,QAAS,GACTC,MAAO,sBACT,GAAI,CACFC,OAAQ,IACRC,QAAS,CAAE,eAAgB,kBAAmB,CAChD,GAIF,IAAMO,EAAQ,CAAC,IAAI,EAAEC,KAAKC,GAAG,GAAG,CAAC,EAAEC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,EAAG,GAAG,CAAC,CAEtEC,EAAW,CACfjB,QAAS,GACTkB,KAAM,CACJR,MAAOA,EACPL,OAAQc,WAAWd,GACnBC,QAASA,EACTc,WAAYX,IAAmBJ,EAC/BE,YAAaA,GAAe,KAC5Bc,SAAU,IAAIV,OAAOW,WAAW,EAClC,EACAC,QAAS,0BACX,EAUA,OARAC,QAAQC,GAAG,CAAC,cAAe,CACzBrB,IAAAA,EACAC,OAAAA,EACAC,QAAAA,EACAI,MAAAA,EACAgB,UAAW,IAAIf,OAAOW,WAAW,EACnC,GAEO,IAAIzB,SAASC,KAAKC,SAAS,CAACkB,GAAW,CAC5Cf,OAAQ,IACRC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,qBAChC,+BAAgC,cAClC,CACF,EAEF,CAAE,MAAOF,EAAO,CAGd,OAFAuB,QAAQvB,KAAK,CAAC,uBAAwBA,GAE/B,IAAIJ,SAASC,KAAKC,SAAS,CAAC,CACjCC,QAAS,GACTC,MAAO,sBACT,GAAI,CACFC,OAAQ,IACRC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,qBAChC,+BAAgC,cAClC,CACF,EACF,CACF,CC5FuB,SAAAwB,EAAAC,CAAA,EACvB,MAAiB,GAAAC,EAAAC,CAAA,EAAO,CACxB,GAAAF,CAAA,CACAG,iBAA8BC,EAAAC,CAAA,CAC9BC,KAAA,gBACAxC,QAAuB,GAAAyC,EAAAC,EAAA,EAAc,gBAAkB1C,EACvD,EACA","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./pages/api/game/bet.ts","webpack://_N_E/"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { NextApiRequest, NextApiResponse } from 'next';\n\nexport const config = {\n  runtime: 'edge',\n};\n\nexport default async function handler(req: Request): Promise<Response> {\n  if (req.method !== 'POST') {\n    return new Response(JSON.stringify({ success: false, error: 'Method not allowed' }), {\n      status: 405,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  try {\n    const body = await req.json();\n    const { fid, amount, roundId, autoCashOut } = body;\n\n    // Validate required fields\n    if (!fid || !amount || !roundId) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Missing required fields: fid, amount, roundId'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    }\n\n    if (amount < 1) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Minimum bet amount is 1'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Simulate bet placement for demo\n    // In production, this would validate user balance, create DB records, etc.\n    \n    const simulatedBalance = 1000; // Mock balance\n    \n    if (simulatedBalance < amount) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Insufficient balance'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Generate a mock bet ID\n    const betId = `bet_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    const response = {\n      success: true,\n      data: {\n        betId: betId,\n        amount: parseFloat(amount),\n        roundId: roundId,\n        newBalance: simulatedBalance - amount,\n        autoCashOut: autoCashOut || null,\n        placedAt: new Date().toISOString()\n      },\n      message: 'Bet placed successfully!'\n    };\n\n    console.log('Bet placed:', {\n      fid,\n      amount,\n      roundId,\n      betId,\n      timestamp: new Date().toISOString()\n    });\n\n    return new Response(JSON.stringify(response), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      },\n    });\n\n  } catch (error) {\n    console.error('Bet placement error:', error);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Bet placement failed'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      },\n    });\n  }\n}\n","\n        import 'next/dist/esm/server/web/globals'\n        import { adapter } from 'next/dist/esm/server/web/adapter'\n        import { IncrementalCache } from 'next/dist/esm/server/lib/incremental-cache'\n        import { wrapApiHandler } from 'next/dist/esm/server/api-utils'\n\n        import handler from \"private-next-pages/api/game/bet.ts\"\n\n        if (typeof handler !== 'function') {\n          throw new Error('The Edge Function \"pages/api/game/bet\" must export a `default` function');\n        }\n\n        export default function nHandler (opts) {\n          return adapter({\n              ...opts,\n              IncrementalCache,\n              page: \"/api/game/bet\",\n              handler: wrapApiHandler(\"/api/game/bet\", handler),\n          })\n        }\n    "],"names":["module","exports","require","handler","req","method","Response","JSON","stringify","success","error","status","headers","fid","amount","roundId","autoCashOut","json","simulatedBalance","betId","Date","now","Math","random","toString","substr","response","data","parseFloat","newBalance","placedAt","toISOString","message","console","log","timestamp","nHandler","opts","adapter","C","IncrementalCache","incremental_cache","k","page","api_utils","fd"],"sourceRoot":""}