{"version":3,"file":"pages/api/frames/aviator.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./pages/api/frames/aviator/index.ts","webpack://_N_E/?24cc"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","// Enhanced Aviator Game Frame with Backend Integration\nimport { NextRequest, NextResponse } from 'next/server'\nimport { FrameRequest, getFrameMessage, getFrameHtmlResponse } from '@coinbase/onchainkit/frame'\n\nexport const config = {\n  runtime: 'edge'\n}\n\n// Game state interface\ninterface GameState {\n  status: 'waiting' | 'flying' | 'crashed'\n  multiplier: number\n  roundId: string\n  timeRemaining?: number\n  currentBets?: any[]\n}\n\n// Fetch game state from local API\nasync function fetchGameState(): Promise<GameState> {\n  try {\n    const baseUrl = process.env.NEXT_PUBLIC_FRAME_BASE_URL || 'https://farcaster-aviator.vercel.app'\n    const response = await fetch(`${baseUrl}/api/game/state`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    })\n    \n    if (response.ok) {\n      const result = await response.json()\n      const data = result.data\n      return {\n        status: data.status || 'waiting',\n        multiplier: data.multiplier || 1.0,\n        roundId: data.round_id || Date.now().toString(),\n        timeRemaining: data.time_remaining,\n        currentBets: data.current_bets || []\n      }\n    }\n  } catch (error) {\n    console.log('Failed to fetch game state:', error)\n  }\n  \n  // Fallback state\n  return {\n    status: 'waiting',\n    multiplier: 1.0,\n    roundId: Date.now().toString()\n  }\n}\n\n// Generate dynamic SVG based on game state\nfunction generateGameImage(gameState: GameState): string {\n  const { status, multiplier } = gameState\n  \n  let statusText = 'Ready to Fly!'\n  let statusColor = '#00ff88'\n  let multiplierText = ''\n  \n  if (status === 'flying') {\n    statusText = 'FLYING! ðŸš€'\n    statusColor = '#ffaa00'\n    multiplierText = `${multiplier.toFixed(2)}x`\n  } else if (status === 'crashed') {\n    statusText = 'CRASHED! ðŸ’¥'\n    statusColor = '#ff4444'\n    multiplierText = `Crashed at ${multiplier.toFixed(2)}x`\n  }\n  \n  const svg = `\n    <svg width=\"1200\" height=\"630\" xmlns=\"http://www.w3.org/2000/svg\">\n      <defs>\n        <linearGradient id=\"bg\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" style=\"stop-color:#1a1a2e\"/>\n          <stop offset=\"100%\" style=\"stop-color:#16213e\"/>\n        </linearGradient>\n      </defs>\n      <rect width=\"1200\" height=\"630\" fill=\"url(#bg)\"/>\n      \n      <!-- Title -->\n      <text x=\"600\" y=\"150\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" \n            font-size=\"48\" font-weight=\"bold\" fill=\"#ffffff\">\n        ðŸš€ AVIATOR CRASH GAME\n      </text>\n      \n      <!-- Status -->\n      <text x=\"600\" y=\"250\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" \n            font-size=\"52\" fill=\"${statusColor}\">\n        ${statusText}\n      </text>\n      \n      <!-- Multiplier (if flying/crashed) -->\n      ${multiplierText ? `\n        <text x=\"600\" y=\"350\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" \n              font-size=\"72\" font-weight=\"bold\" fill=\"#ffaa00\">\n          ${multiplierText}\n        </text>\n      ` : ''}\n      \n      <!-- Instructions -->\n      <text x=\"600\" y=\"${multiplierText ? '450' : '350'}\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" \n            font-size=\"24\" fill=\"#cccccc\">\n        ${status === 'waiting' ? 'Place your bet and watch the multiplier climb!' : \n          status === 'flying' ? 'Cash out before the crash!' : \n          'Next round starting soon...'}\n      </text>\n      \n      <!-- Round ID -->\n      <text x=\"600\" y=\"${multiplierText ? '500' : '400'}\" text-anchor=\"middle\" font-family=\"Arial, sans-serif\" \n            font-size=\"16\" fill=\"#888888\">\n        Round: ${gameState.roundId.slice(-8)}\n      </text>\n    </svg>\n  `\n  \n  return `data:image/svg+xml;base64,${Buffer.from(svg).toString('base64')}`\n}\n\n// Handle POST requests (button interactions)\nasync function handlePOST(req: any, res: any) {\n  try {\n    const body: FrameRequest = await req.json()\n    const { isValid, message } = await getFrameMessage(body)\n\n    if (!isValid || !message) {\n      return new NextResponse('Invalid frame message', { status: 400 })\n    }\n\n    const buttonIndex = message.button\n    const userFid = message.interactor.fid\n    \n    // Fetch current game state\n    const gameState = await fetchGameState()\n    \n    let redirectUrl = ''\n    let newGameState = gameState\n    \n    // Handle different button actions\n    switch (buttonIndex) {\n      case 1: // Play Game / Place Bet\n        if (gameState.status === 'waiting') {\n          // Try to place a bet\n          try {\n            const baseUrl = process.env.NEXT_PUBLIC_FRAME_BASE_URL || 'https://farcaster-aviator.vercel.app'\n            const betResponse = await fetch(`${baseUrl}/api/game/bet`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                fid: userFid,\n                amount: 10, // Default $10 bet\n                roundId: gameState.roundId,\n                autoCashOut: 2.0 // Auto cash out at 2x\n              })\n            })\n            \n            if (betResponse.ok) {\n              const betData = await betResponse.json()\n              console.log('Bet placed successfully:', betData)\n              // Update game state after placing bet\n              newGameState = await fetchGameState()\n            }\n          } catch (error) {\n            console.log('Failed to place bet:', error)\n          }\n        } else if (gameState.status === 'flying') {\n          // Try to cash out\n          try {\n            const baseUrl = process.env.NEXT_PUBLIC_FRAME_BASE_URL || 'https://farcaster-aviator.vercel.app'\n            const cashoutResponse = await fetch(`${baseUrl}/api/game/cashout`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                fid: userFid,\n                betId: `bet_${userFid}_${gameState.roundId}`, // Generate consistent bet ID\n                multiplier: gameState.multiplier\n              })\n            })\n            \n            if (cashoutResponse.ok) {\n              const cashoutData = await cashoutResponse.json()\n              console.log('Cash out successful:', cashoutData)\n            }\n            newGameState = await fetchGameState()\n          } catch (error) {\n            console.log('Failed to cash out:', error)\n          }\n        }\n        break\n        \n      case 2: // Alternative action\n        redirectUrl = `${process.env.GAME_API_URL}`\n        break\n        \n      case 3: // Stats or Info\n        redirectUrl = `${process.env.NEXT_PUBLIC_FRAME_BASE_URL}/api/frames/aviator/stats`\n        break\n    }\n    \n    // Determine button configuration based on new game state\n    const buttons = newGameState.status === 'waiting' ? [\n      { label: 'ðŸ’° Bet $10' }\n    ] : newGameState.status === 'flying' ? [\n      { label: 'ðŸ’¸ Cash Out Now!' }\n    ] : [\n      { label: 'ðŸš€ New Round' }\n    ]\n\n    const frameHtml = getFrameHtmlResponse({\n      buttons: buttons as any, // Cast to fix type issue\n      image: {\n        src: generateGameImage(newGameState)\n      },\n      postUrl: '/api/frames/aviator',\n      ...(redirectUrl && { redirectUrl })\n    })\n\n    return new NextResponse(frameHtml)\n\n  } catch (error) {\n    console.error('Error in POST handler:', error)\n    return new NextResponse('Frame error', { status: 500 })\n  }\n}\n\n// Handle GET requests (initial frame load)\nasync function handleGET(req: any, res: any) {\n  try {\n    // Fetch current game state\n    const gameState = await fetchGameState()\n    \n    // Determine buttons based on game state\n    const buttons = gameState.status === 'waiting' ? [\n      { label: 'ðŸŽ® Play Game' }\n    ] : gameState.status === 'flying' ? [\n      { label: 'ðŸ’¸ Cash Out!' }\n    ] : [\n      { label: 'ðŸš€ New Round' }\n    ]\n\n    const frameHtml = getFrameHtmlResponse({\n      buttons: buttons as any, // Cast to fix type issue\n      image: {\n        src: generateGameImage(gameState)\n      },\n      postUrl: '/api/frames/aviator'\n    })\n\n    return new NextResponse(frameHtml)\n    \n  } catch (error) {\n    console.error('Error in GET handler:', error)\n    \n    // Fallback frame\n    const frameHtml = getFrameHtmlResponse({\n      buttons: [\n        { label: 'ðŸŽ® Play Game' }\n      ] as any,\n      image: {\n        src: generateGameImage({\n          status: 'waiting',\n          multiplier: 1.0,\n          roundId: 'demo'\n        })\n      },\n      postUrl: '/api/frames/aviator'\n    })\n\n    return new NextResponse(frameHtml)\n  }\n}\n\n// Main handler\nexport default async function handler(req: any, res: any) {\n  if (req.method === 'POST') {\n    return await handlePOST(req, res)\n  } else {\n    return await handleGET(req, res)\n  }\n}","\n        import 'next/dist/esm/server/web/globals'\n        import { adapter } from 'next/dist/esm/server/web/adapter'\n        import { IncrementalCache } from 'next/dist/esm/server/lib/incremental-cache'\n        import { wrapApiHandler } from 'next/dist/esm/server/api-utils'\n\n        import handler from \"private-next-pages/api/frames/aviator/index.ts\"\n\n        if (typeof handler !== 'function') {\n          throw new Error('The Edge Function \"pages/api/frames/aviator\" must export a `default` function');\n        }\n\n        export default function nHandler (opts) {\n          return adapter({\n              ...opts,\n              IncrementalCache,\n              page: \"/api/frames/aviator\",\n              handler: wrapApiHandler(\"/api/frames/aviator\", handler),\n          })\n        }\n    "],"names":["module","exports","require","fetchGameState","response","fetch","method","headers","ok","data","result","json","status","multiplier","roundId","round_id","Date","now","toString","timeRemaining","time_remaining","currentBets","current_bets","error","console","log","generateGameImage","gameState","statusText","statusColor","multiplierText","toFixed","svg","slice","Buffer","from","handlePOST","req","res","body","isValid","message","getFrameMessage","NextResponse","buttonIndex","button","userFid","interactor","fid","redirectUrl","newGameState","betResponse","JSON","stringify","amount","autoCashOut","betData","cashoutResponse","betId","cashoutData","process","env","GAME_API_URL","buttons","label","frameHtml","getFrameHtmlResponse","image","src","postUrl","handleGET","handler","nHandler","opts","adapter","C","IncrementalCache","incremental_cache","k","page","api_utils","fd"],"sourceRoot":""}